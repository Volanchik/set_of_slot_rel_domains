m4include(m4define([m4currentFile],builtin(translit,__file__,\,/))builtin(regexp,m4currentFile,.*[/],\&)_config.m4)
M4SCS([
#include "../../include/sckp_keynodes.scsy" 
///////////////////////////////////////////////////////
//        File: add_element_from_first_domain.m4scp
// Description: add elements of first domain to specified set
///////////////////////////////////////////////////////
//      Author: VOA
//        Date: 05.01.2015
//    Location: /lib/set/add_element_from_first_domain
// Output parameters:	1	-	state
//			2	-	true
//			3	-	history
// Input parameters:	3	-	history = (arcA, ...)
//			4	-	parameters = (composition, ...)
//			5	-	logging
// Execution input time complexity:	unlimited, logging dependable
// Execution output time complexity:	O(n) + logging time
// Execution input space complexity:	unlimited, logging dependable
// Execution output space complexity:	O(n) + logging time
])

procedure(set_add_element_from_first_domain,
M4SCS(	[[
		enter_message = /"\n\nset_add_element_from_first_domain: entering\n\n"/,
		leave_message = /"\n\nset_add_element_from_first_domain: leaving\n\n"/,

		chain_get_next = "/lib/chain/get_next/chain_get_next",
		chain_get_next_singlet = "/lib/chain/get_next_singlet/chain_get_next_singlet",

		prmp1, prmp2, prmp3, prmp4, prmp5, prmp6, prmp7,
		prmg1, prmg2, prmg3, prmg4, prmg5, prmd1, prmd2, prmd3, prmf1
	]])
M4SEC(	[[		
		chain_get_next = /../chain/get_next[SYFIX]/chain_get_next,
		chain_get_next_singlet = /../chain/get_next[SYFIX]/chain_get_next_singlet,

		prmp1, prmp2, prmp3, prmp4, prmp5, prmp6, prmp7,
		prmg1, prmg2, prmg3, prmg4, prmg5, prmd1, prmd2, prmd3, prmf1
	]]), 
	[{
		state, true, history, parameters, logging, empty, descr,
		arcA, result_set, 
		link, 
		relationA, elementArcA, elem1, elemA, newElementArc
	}], 
	{[ 
		1_: in_: out_: state,
		2_: in_: out_: true,
		3_: in_: out_: history,
		4_: in_: parameters, 
		5_: in_: logging
	]}) 

DBG(M4SCS(print([1_: fixed_: enter_message])))

genEl([1_: assign_: node_: const_: empty])

call([1_: fixed_: chain_get_next_singlet, 2_: fixed_: prmg1 = [{1_: parameters, 2_: link, 3_: result_set}], 3_: assign_: descr])

waitReturn([1_: fixed_: descr])

call([1_: fixed_: chain_get_next_singlet, 2_: fixed_: prmg2 = [{1_: history, 2_: link, 3_: arcA}], 3_: assign_: descr])

waitReturn([1_: fixed_: descr])

searchElStr3([
	1_: assign_: node_: const_: relationA,
	2_: fixed_: arcA,
	3_: assign_: arc_: const_: actual_: elementArcA
], ,)

searchElStr3([
	1_: assign_: node_: const_: elem1,
	2_: fixed_: elementArcA,
	3_: assign_: const_: elemA
], ,)

label(add_to_res_set)
genElStr3([
	1_: fixed_: result_set,
	2_: assign_: arc_: const_: actual_: pos_: permanent_: newElementArc,
	3_: fixed_: elem1
])

label(final)
eraseEl([1_: fixed_: f_: empty])

DBG(M4SCS(print([1_: fixed_: leave_message])))

return()
end()